// Jenkinsfile integration test of source code from https://github.com/InES-IoT/openthread/tree/coap_block-wise_transfer
//
// Build the Target Code


//	author:	scnm, ZHAW-InES
//	date:	24.10.2019

node
{
    // Allocate executor and workspace for the Pipeline
    checkout scm
}

pipeline
{
    agent any
    
    environment
    {
    GIT_COMMIT_EMAIL = sh (
            script: 'git --no-pager show -s --format=\'%ae\'',
            returnStdout: true
    ).trim()

        MAIL_RECIPIENT = "scnm@zhaw.ch"

        MAIL_SENDER = "jenkins@srv-lab-t-002.zhaw.ch"
        MAIL_FAILED_SUBJECT = "Failed: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
        MAIL_BODY = "ERROR: Building Project. Check consol output at: ${env.BUILD_URL}"
        
        // global vars
        SERVER_DEV_JLINK_ID="801007266"
        CLIENT_DEV_JLINK_ID="801007268"
        FLAG_DIR="/media/hdd/Jenkins/share"
        THREAD_NETWORK_CHANNEL='26'
        THREAD_NETWORK_PANID='0xdead'
        THREAD_NETWORK_MASTERKEY='87903475abfdea349ab4950591aecb49'
        TTY_SERVERDEVICE='/dev/ttyCliServer'
        TTY_CLIENTDEVICE='/dev/ttyCliClient'
        TEST_BORDER_ROUTER_IP='2001:620:190:ffa1::9'
        TEST_BORDER_ROUTER_USER='allrounder'
        SERVERDEVICE_IP='2001:620:190:ffa7::1234'
        CLIENTDEVICE_IP='2001:620:190:ffa7::4321'
    }
    
    options 
    {
        disableConcurrentBuilds()
    }
    
    stages
    {
        // Check test enviroment
        
        stage('Pre Checks')
        {
            steps
            {
                sh 'sleep 3'
                
                script
                {
                    // check, if hardware is free to use
                    while (!fileExists("${env.FLAG_DIR}/hw_free.flag"))
                    {
                        echo "${env.FLAG_DIR}/hw_free.flag not available"
                        // wait for hardware
                        sh 'sleep 30'
                    }
                }

                // put hardwareflag
                sh "rm ${env.FLAG_DIR}/hw_free.flag"

                echo 'check the test environement'
                sh './.tests/pre_install_checks.py'
                echo 'check if test-devices are connected'
                sh './.tests/check_usb_dev.py'
            }
        }
        
        stage('Test real Thread Router')
        {
            steps
            {
                echo 'connect to real Thread router'
                sh "ssh ${env.TEST_BORDER_ROUTER_USER}@${env.TEST_BORDER_ROUTER_IP} 'sudo systemctl status wpantund.service' | grep 'active (running)'"
                sh "ssh ${env.TEST_BORDER_ROUTER_USER}@${env.TEST_BORDER_ROUTER_IP} 'sudo systemctl status dnsmasq.service' | grep 'active (running)'"
                sh "ssh ${env.TEST_BORDER_ROUTER_USER}@${env.TEST_BORDER_ROUTER_IP} 'sudo systemctl status otbr-nat44.service' | grep 'active (exited)'"
                sh "ssh ${env.TEST_BORDER_ROUTER_USER}@${env.TEST_BORDER_ROUTER_IP} 'sudo systemctl status avahi-daemon.service' | grep 'active (running)'"
                sh "ssh ${env.TEST_BORDER_ROUTER_USER}@${env.TEST_BORDER_ROUTER_IP} 'sudo systemctl status otbr-web.service' | grep 'active (running)'"

                sh "ssh ${env.TEST_BORDER_ROUTER_USER}@${env.TEST_BORDER_ROUTER_IP} 'sudo wpanctl status' | grep 'associated'"
                sh "ssh ${env.TEST_BORDER_ROUTER_USER}@${env.TEST_BORDER_ROUTER_IP} 'sudo wpanctl status' | grep 'true'"
                sh "ssh ${env.TEST_BORDER_ROUTER_USER}@${env.TEST_BORDER_ROUTER_IP} 'sudo wpanctl status' | grep 'spinel'"
                sh "ssh ${env.TEST_BORDER_ROUTER_USER}@${env.TEST_BORDER_ROUTER_IP} 'sudo wpanctl status' | grep '26'"
                sh "ssh ${env.TEST_BORDER_ROUTER_USER}@${env.TEST_BORDER_ROUTER_IP} 'sudo wpanctl status' | grep '0xDEAD'"
                
                // check ip addr for thread network (prefix)
                sh "ssh ${env.TEST_BORDER_ROUTER_USER}@${env.TEST_BORDER_ROUTER_IP} 'ip address' | grep '2001:620:190:ffa7:'"
            }
        }
        
        stage('Test virtual POSIX Thread Router')
        {
            steps
            {
                echo 'check health of POSIX router'
                script
                {
                    def status = 0

                    try
                    {
                        sh("ls ${env.POSIX_BORDERROUTER_ERROR_FLAG}")
                    } 
                    catch(Exception e)
                    {
                        // file not found => PASS
                        status = 1
                    }

                    if (status != 0)
                    {
                        echo 'POSIX router UP'
                    }
                    else
                    {
                        echo 'POSIX router DOWN'
                        sh 'exit 1'
                    }
                }
            }
        }
        
        // Test code
        
        stage('Build Target')
        {
            steps
            {
                echo 'build NRF52840'
                sh "./bootstrap && make -f examples/Makefile-nrf52840 COAPS=1 COAP=1 COAP_BLOCK=1 JOINER=1"
                sh "arm-none-eabi-size output/nrf52840/bin/ot-cli-mtd"
                //sh "arm-none-eabi-size output/nrf52840/bin/ot-cli-ftd"
                echo 'Binary to ihex (Minimal Thread Device)'
                sh 'arm-none-eabi-objcopy -O ihex output/nrf52840/bin/ot-cli-mtd mtd.hex'
                //sh 'arm-none-eabi-objcopy -O ihex output/nrf52840/bin/ot-cli-ftd ftd.hex'
            }
        }
        
        stage('Flash NRF52x Nodes (1xMTD/1xFTD)')
        {
            steps
            {
                echo 'list connected devices'
                sh './.tests/nrfjprog/nrfjprog -i'
                echo 'flash NRF52x node leader'
                //sh "./.tests/nrfjprog/nrfjprog --chiperase --program ftd.hex -s ${env.SERVER_DEV_JLINK_ID} --reset"
                sh "./.tests/nrfjprog/nrfjprog --chiperase --program mtd.hex -s ${env.SERVER_DEV_JLINK_ID} --reset"
                echo 'flash NRF52x node joiner'
                sh "./.tests/nrfjprog/nrfjprog --chiperase --program mtd.hex -s ${env.CLIENT_DEV_JLINK_ID} --reset"
            }
        }
        
        stage('CLI: Connect to Thread Network')
        {
            steps
            {
                echo 'Set Channel'
                sh "python3 .tests/test_cli_cmd.py 'channel ${env.THREAD_NETWORK_CHANNEL}' 'Done' ${env.TTY_CLIENTDEVICE}"
                sh "python3 .tests/test_cli_cmd.py 'channel ${env.THREAD_NETWORK_CHANNEL}' 'Done' ${env.TTY_SERVERDEVICE}"
                
                echo 'Set Master Key'
                sh "python3 .tests/test_cli_cmd.py 'masterkey ${env.THREAD_NETWORK_MASTERKEY}' 'Done' ${env.TTY_CLIENTDEVICE}"
                sh "python3 .tests/test_cli_cmd.py 'masterkey ${env.THREAD_NETWORK_MASTERKEY}' 'Done' ${env.TTY_SERVERDEVICE}"
                
                echo 'Set PAN ID'
                sh "python3 .tests/test_cli_cmd.py 'panid ${env.THREAD_NETWORK_PANID}' 'Done' ${env.TTY_CLIENTDEVICE}"
                sh "python3 .tests/test_cli_cmd.py 'panid ${env.THREAD_NETWORK_PANID}' 'Done' ${env.TTY_SERVERDEVICE}"
                
                echo 'Network Controller'
                sh "python3 .tests/test_cli_cmd.py 'ifconfig up' 'Done' ${env.TTY_CLIENTDEVICE}"
                sh "python3 .tests/test_cli_cmd.py 'ifconfig up' 'Done' ${env.TTY_SERVERDEVICE}"
                
                echo 'Start Thread networking'
                sh "python3 .tests/test_cli_cmd.py 'thread start' 'Done' ${env.TTY_CLIENTDEVICE}"
                sh "python3 .tests/test_cli_cmd.py 'thread start' 'Done' ${env.TTY_SERVERDEVICE}"
                sh "sleep 10"
                
                echo 'Check, if connected...'
                sh "python3 .tests/test_cli_cmd.py 'state' 'child' ${env.TTY_CLIENTDEVICE}"
                sh "python3 .tests/test_cli_cmd.py 'state' 'child' ${env.TTY_SERVERDEVICE}"
                
                echo 'Set FTD and MTD IP'
                sh "python3 .tests/test_cli_cmd.py 'ipaddr add '${env.SERVERDEVICE_IP} 'Done' ${env.TTY_SERVERDEVICE}"
                sh "python3 .tests/test_cli_cmd.py 'ipaddr add '${env.CLIENTDEVICE_IP} 'Done' ${env.TTY_CLIENTDEVICE}"
            }
        }
        
        stage('CLI: Run CoAP block-wise Transfer')
        {
            steps
            {
                echo 'Start CoAP'
                sh "python3 .tests/test_cli_cmd.py 'coap start' 'Done' ${env.TTY_CLIENTDEVICE}"
                sh "python3 .tests/test_cli_cmd.py 'coap start' 'Done' ${env.TTY_SERVERDEVICE}"
                
                echo 'Create CoAP Resource on FTD Server'
                sh "python3 .tests/test_cli_cmd.py 'coap resource test-resource' 'Done' ${env.TTY_SERVERDEVICE}"
                
                echo 'Test GET to FTD Server'
                sh "python3 .tests/test_cli_cmd.py 'coap get ${env.SERVERDEVICE_IP} test-resource con' 'test-payload correct' ${env.TTY_CLIENTDEVICE} true"
                sh "sleep 3"
                
                echo 'Test PUT to FTD Server'
                sh "python3 .tests/test_cli_cmd.py 'coap put ${env.SERVERDEVICE_IP} test-resource con test-payload' '' ${env.TTY_CLIENTDEVICE} true"
                sh "sleep 3"
                
                echo 'Test POST to FTD Server'
               sh "python3 .tests/test_cli_cmd.py 'coap post ${env.SERVERDEVICE_IP} test-resource con test-payload' '' ${env.TTY_CLIENTDEVICE} true"
                sh "sleep 3"
                
                echo 'Create CoAP Resource on MTD Server'
                sh "python3 .tests/test_cli_cmd.py 'coap resource test-resource' '' ${env.TTY_CLIENTDEVICE} true"
                
                echo 'Test GET to MTD Server'
                sh "python3 .tests/test_cli_cmd.py 'coap get ${env.CLIENTDEVICE_IP} test-resource con' '' ${env.TTY_SERVERDEVICE} true"
                
                echo 'Test PUT to MTD Server'
                sh "python3 .tests/test_cli_cmd.py 'coap put ${env.CLIENTDEVICE_IP} test-resource con test-payload' '' ${env.TTY_SERVERDEVICE} true"
                
                echo 'Test POST to MTD Server'
                sh "python3 .tests/test_cli_cmd.py 'coap post ${env.CLIENTDEVICE_IP} test-resource con test-payload' '' ${env.TTY_SERVERDEVICE} true"
                
                echo 'Stop CoAP'
                sh "python3 .tests/test_cli_cmd.py 'coap stop' '' ${env.TTY_CLIENTDEVICE}"
                sh "python3 .tests/test_cli_cmd.py 'coap stop' '' ${env.TTY_SERVERDEVICE}"
                
                sh "sleep 5"
            }
        }

        stage('CLI: Run CoAP Secure block-wise Transfer')
        {
            steps
            {
                echo 'Set CoAPs Ciphersuite'
                sh "python3 .tests/test_cli_cmd.py 'coaps x509' '' ${env.TTY_CLIENTDEVICE}"
                sh "python3 .tests/test_cli_cmd.py 'coaps x509' '' ${env.TTY_SERVERDEVICE}"
                
                echo 'Start CoAPs'
                sh "python3 .tests/test_cli_cmd.py 'coaps start' '' ${env.TTY_CLIENTDEVICE}"
                sh "python3 .tests/test_cli_cmd.py 'coaps start' '' ${env.TTY_SERVERDEVICE}"
                
                echo 'Create CoAPs Resource on FTD Server'
                sh "python3 .tests/test_cli_cmd.py 'coaps resource test-resource' '' ${env.TTY_SERVERDEVICE}"
                
                echo 'Connect to FTD CoAPs Server'
                sh "python3 .tests/test_cli_cmd.py 'coaps connect ${env.SERVERDEVICE_IP}' '' ${env.TTY_CLIENTDEVICE} true"
                sh "sleep 3"
                
                echo 'Test PUT to FTD Server'
                sh "python3 .tests/test_cli_cmd.py 'coaps put test-resource con test-payload' '' ${env.TTY_CLIENTDEVICE} true"
                sh "sleep 3"
                
                echo 'Test GET to FTD Server'
                sh "python3 .tests/test_cli_cmd.py 'coaps get test-resource con' '' ${env.TTY_CLIENTDEVICE} true"
                sh "sleep 3"
                
                echo 'Test POST to FTD Server'
                sh "python3 .tests/test_cli_cmd.py 'coaps post test-resource con test-payload' '' ${env.TTY_CLIENTDEVICE} true"
                sh "sleep 3"
                
                echo 'Create CoAPs Resource on MTD Server'
                sh "python3 .tests/test_cli_cmd.py 'coaps resource test-resource' '' ${env.TTY_CLIENTDEVICE}"
                
                echo 'Test GET to MTD Server'
                sh "python3 .tests/test_cli_cmd.py 'coaps get test-resource con' '' ${env.TTY_SERVERDEVICE} true"
                sh "sleep 3"
                
                echo 'Test PUT to MTD Server'
                sh "python3 .tests/test_cli_cmd.py 'coaps put test-resource con test-payload' '' ${env.TTY_SERVERDEVICE} true"
                sh "sleep 3"
                
                echo 'Test POST to MTD Server'
                sh "python3 .tests/test_cli_cmd.py 'coaps post test-resource con test-payload' '' ${env.TTY_SERVERDEVICE} true"
                sh "sleep 3"
                
                echo 'Disconnect to FTD CoAPs Server'
                sh "python3 .tests/test_cli_cmd.py 'coaps disconnect' '' ${env.TTY_CLIENTDEVICE} true"
                
                echo 'Stop CoAPs'
                sh "python3 .tests/test_cli_cmd.py 'coaps stop' '' ${env.TTY_CLIENTDEVICE} true"
                sh "python3 .tests/test_cli_cmd.py 'coaps stop' '' ${env.TTY_SERVERDEVICE} true"
            }
        }

        stage('Reset Devices')
        {
            steps
            {
                echo 'reset'
                sh "python3 .tests/test_cli_cmd.py 'factoryreset' '' ${env.TTY_CLIENTDEVICE}"
                sh "python3 .tests/test_cli_cmd.py 'factoryreset' '' ${env.TTY_SERVERDEVICE}"
            }
        }
    }
    
    post 
    {
        always
        {
            echo 'Clean-up all'
            // give hardware free
            sh "cat > ${env.FLAG_DIR}/hw_free.flag"
            
            sh "ls"
            sh "rm mtd.hex"
            //sh "rm ftd.hex"
            sh "rm -R output/*"
            sh "rm -R build/*"
            sh "rm -R autom4te.cache/*"
        }

        failure 
        {
            script
            {
                mail(from: env.MAIL_SENDER, 
                    subject: env.MAIL_FAILED_SUBJECT, 
                    body: env.MAIL_BODY, 
                    to: env.MAIL_RECIPIENT)

                if (env.MAIL_RECIPIENT != env.GIT_COMMIT_EMAIL)
                {
                    mail(from: env.MAIL_SENDER,
                        subject: env.MAIL_FAILED_SUBJECT,
                        body: env.MAIL_BODY,
                        to: env.GIT_COMMIT_EMAIL)
                }
            }    
        }

        success
        {
            sh "echo \'Git lattest committer email: \'"
            sh "echo ${env.GIT_COMMIT_EMAIL}"
        }
    }
}